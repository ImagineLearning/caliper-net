using ImsGlobal.Caliper.Util;
using Newtonsoft.Json;
using System;

using NetCore = System.Text.Json.Serialization;


namespace ImsGlobal.Caliper.Entities
{
    /// <summary>
    /// <para>
    /// A Caliper Response is a generic type that represents the selected option generated by a Person interacting with an 
    /// AssessmentItem.
    /// </para>
    /// <b>NOTE: Utilize Response only if no suitable subtype exists to represent the response being described.</b>
    /// </summary>
    public class Response : Entity
    {
        /// <summary>
        /// The associated Attempt. The attempt value MUST be expressed either as an object or as a string corresponding to 
        /// the attempt’s IRI. If an object representation is provided, the Attempt SHOULD reference both the Person who 
        /// initiated the Response and the relevant AssessmentItem.
        /// </summary>
        [JsonProperty("attempt", Order = 13)]
        public Attempt Attempt { get; set; }

        /// <summary>
        /// An ISO 8601 date and time value expressed with millisecond precision that describes when the Response was commenced. 
        /// The value MUST be expressed using the format YYYY-MM-DDTHH:mm:ss.SSSZ set to UTC with no offset specified.
        /// </summary>
        [JsonProperty("startedAtTime", Order = 14)]
        public DateTime? StartedAtTime { get; set; }

        /// <summary>
        /// An ISO 8601 date and time value expressed with millisecond precision that describes when the Response was completed 
        /// or terminated. The value MUST be expressed using the format YYYY-MM-DDTHH:mm:ss.SSSZ set to UTC with no offset specified.
        /// </summary>
        [JsonProperty("endedAtTime", Order = 15)]
        public DateTime? EndedAtTime { get; set; }

        /// <summary>
        /// A time interval that represents the time taken to complete the Response. If a duration is specified the value MUST 
        /// conform to the ISO 8601 duration format.
        /// </summary>
        [JsonProperty("duration", Order = 16)]
        [JsonConverter(typeof(CaliperDurationNewtonsoftConverter))]
        [NetCore.JsonConverter(typeof(CaliperDurationConverter))]
        public TimeSpan? Duration { get; set; }


        /// <summary>
        /// Parameterless constructor for JSON Deserialization
        /// </summary>
        public Response() { }

        public Response(Uri id) : base(id) { }


        protected override EntityType GetEntityType() => EntityType.Response;
    }
}
